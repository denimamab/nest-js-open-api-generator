//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../axios-client.types';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './UsersControllerClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';


export type GetUserUsersControllerQueryParameters = {
  id: string ;
}

export type UpdateUserUsersControllerQueryParameters = {
  id: string ;
}

export type RemoveUserUsersControllerQueryParameters = {
  id: string ;
}

export function createUserUrl(): string {
  let url_ = getBaseUrl() + "/users";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createUserMutationKey(): MutationKey {
  return trimArrayEnd([
      'UsersControllerClient',
      'createUser',
    ]);
}

export function useCreateUserMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, Types.CreateUserDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, Types.CreateUserDto, TContext> {
  const key = createUserMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.CreateUserDto) => Client.createUser(body),
    mutationKey: key,
  });
}
  
export function getAllUsersUrl(): string {
  let url_ = getBaseUrl() + "/users";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getAllUsersDefaultOptions: Omit<UseQueryOptions<Types.GetUserDto[], unknown, Types.GetUserDto[]>, 'queryKey'> = {
  queryFn: __getAllUsers,
};
export function getGetAllUsersDefaultOptions() {
  return getAllUsersDefaultOptions;
};
export function setGetAllUsersDefaultOptions(options: typeof getAllUsersDefaultOptions) {
  getAllUsersDefaultOptions = options;
}

export function getAllUsersQueryKey(): QueryKey;
export function getAllUsersQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'UsersControllerClient',
      'getAllUsers',
    ]);
}
function __getAllUsers() {
  return Client.getAllUsers(
    );
}

export function useGetAllUsersQuery<TSelectData = Types.GetUserDto[], TError = unknown>(options?: Omit<UseQueryOptions<Types.GetUserDto[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetAllUsersQuery<TSelectData = Types.GetUserDto[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.GetUserDto[], TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined;
  

  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  if (axiosConfig) {
    options = options ?? { } as any;
    options!.meta = { ...options!.meta, axiosConfig };
  }

  return useQuery<Types.GetUserDto[], TError, TSelectData>({
    queryFn: __getAllUsers,
    queryKey: getAllUsersQueryKey(),
    ...getAllUsersDefaultOptions as unknown as Omit<UseQueryOptions<Types.GetUserDto[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}

export function setGetAllUsersData(queryClient: QueryClient, updater: (data: Types.GetUserDto[] | undefined) => Types.GetUserDto[], ) {
  queryClient.setQueryData(getAllUsersQueryKey(),
    updater
  );
}

export function setGetAllUsersDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.GetUserDto[] | undefined) => Types.GetUserDto[]) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function getUserUrl(id: string): string {
  let url_ = getBaseUrl() + "/users/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getUserDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey'> = {
  queryFn: __getUser,
};
export function getGetUserDefaultOptions() {
  return getUserDefaultOptions;
};
export function setGetUserDefaultOptions(options: typeof getUserDefaultOptions) {
  getUserDefaultOptions = options;
}

export function getUserQueryKey(id: string): QueryKey;
export function getUserQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id,  } = params[0] as GetUserUsersControllerQueryParameters;

    return trimArrayEnd([
        'UsersControllerClient',
        'getUser',
        id as any,
      ]);
  } else {
    return trimArrayEnd([
        'UsersControllerClient',
        'getUser',
        ...params
      ]);
  }
}
function __getUser(context: QueryFunctionContext) {
  return Client.getUser(
      context.queryKey[2] as string    );
}

export function useGetUserQuery<TSelectData = void, TError = unknown>(dto: GetUserUsersControllerQueryParameters, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;

export function useGetUserQuery<TSelectData = void, TError = unknown>(id: string, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetUserQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined;
  let id: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id,  } = params[0] as GetUserUsersControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [id, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  if (axiosConfig) {
    options = options ?? { } as any;
    options!.meta = { ...options!.meta, axiosConfig };
  }

  return useQuery<void, TError, TSelectData>({
    queryFn: __getUser,
    queryKey: getUserQueryKey(id),
    ...getUserDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}

export function setGetUserData(queryClient: QueryClient, updater: (data: void | undefined) => void, id: string) {
  queryClient.setQueryData(getUserQueryKey(id),
    updater
  );
}

export function setGetUserDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function updateUserUrl(id: string): string {
  let url_ = getBaseUrl() + "/users/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateUserMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'UsersControllerClient',
      'updateUser',
      id as any,
    ]);
}

export function useUpdateUserMutation<TContext>(id: string, options?: Omit<UseMutationOptions<void, unknown, Types.UpdateUserDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, Types.UpdateUserDto, TContext> {
  const key = updateUserMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.UpdateUserDto) => Client.updateUser(id, body),
    mutationKey: key,
  });
}
  
type UpdateUser__MutationParameters = UpdateUserUsersControllerQueryParameters & {
  body: Types.UpdateUserDto;
}

export function useUpdateUserMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, UpdateUser__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: UpdateUserUsersControllerQueryParameters}): UseMutationResult<void, unknown, UpdateUser__MutationParameters, TContext> {
  const key = updateUserMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: UpdateUser__MutationParameters) => Client.updateUser(data.id ?? options?.parameters?.id!, data.body),
  mutationKey: key,
});
}
  
export function removeUserUrl(id: string): string {
  let url_ = getBaseUrl() + "/users/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function removeUserMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'UsersControllerClient',
      'removeUser',
      id as any,
    ]);
}

export function useRemoveUserMutation<TContext>(id: string, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = removeUserMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.removeUser(id),
    mutationKey: key,
  });
}
  
type RemoveUser__MutationParameters = RemoveUserUsersControllerQueryParameters

export function useRemoveUserMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, RemoveUser__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: RemoveUserUsersControllerQueryParameters}): UseMutationResult<void, unknown, RemoveUser__MutationParameters, TContext> {
  const key = removeUserMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: RemoveUser__MutationParameters) => Client.removeUser(data.id ?? options?.parameters?.id!),
  mutationKey: key,
});
}